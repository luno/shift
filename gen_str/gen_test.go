package gen_str_test

// Code generated by shiftgen at get_str_test.go:18. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/luno/jettison/errors"
	"github.com/luno/jettison/j"
	"github.com/luno/shift"
)

// Insert inserts a new users table entity. All the fields of the
// insert receiver are set, as well as status, created_at and updated_at.
// The newly created entity id is returned on success or an error.
func (一 insert) Insert(ctx context.Context, tx *sql.Tx, st shift.Status) (string, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("insert into users set `status`=?, `created_at`=?, `updated_at`=? ")
	args = append(args, st.ShiftStatus(), time.Now(), time.Now())

	q.WriteString(", `ksuid`=?")
	args = append(args, 一.KSUID)

	q.WriteString(", `name`=?")
	args = append(args, 一.Name)

	q.WriteString(", `dob`=?")
	args = append(args, 一.DateOfBirth)

	_, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return "", err
	}

	return 一.KSUID, nil
}

// Update updates the status of a users table entity. All the fields of the
// update receiver are updated, as well as status and updated_at.
// The entity id is returned on success or an error.
func (一 update) Update(ctx context.Context, tx *sql.Tx, from shift.Status,
	to shift.Status) (string, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update users set `status`=?, `updated_at`=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(", `name`=?")
	args = append(args, 一.Name)

	q.WriteString(", `amount`=?")
	args = append(args, 一.Amount)

	q.WriteString(" where `ksuid`=? and `status`=?")
	args = append(args, 一.KSUID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return "", err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return "", err
	}
	if n != 1 {
		return "", errors.Wrap(shift.ErrRowCount, "update", j.KV("count", n))
	}

	return 一.KSUID, nil
}

// Update updates the status of a users table entity. All the fields of the
// complete receiver are updated, as well as status and updated_at.
// The entity id is returned on success or an error.
func (一 complete) Update(ctx context.Context, tx *sql.Tx, from shift.Status,
	to shift.Status) (string, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update users set `status`=?, `updated_at`=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(" where `ksuid`=? and `status`=?")
	args = append(args, 一.KSUID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return "", err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return "", err
	}
	if n != 1 {
		return "", errors.Wrap(shift.ErrRowCount, "complete", j.KV("count", n))
	}

	return 一.KSUID, nil
}
