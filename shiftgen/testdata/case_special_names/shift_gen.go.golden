package case_special_names

// Code generated by shiftgen at shiftgen_test.go:123. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/luno/jettison/errors"
	"github.com/luno/jettison/j"
	"github.com/luno/shift"
)

// Insert inserts a new bar_baz table entity. All the fields of the
// 类型 receiver are set, as well as status, created_at and updated_at.
// The newly created entity id is returned on success or an error.
func (一 类型) Insert(
	ctx context.Context, tx *sql.Tx, st shift.Status,
) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("insert into bar_baz set `status`=?, `created_at`=?, `updated_at`=? ")
	args = append(args, st.ShiftStatus(), time.Now(), time.Now())

	q.WriteString(", `name`=?")
	args = append(args, 一.Name)

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

// Update updates the status of a bar_baz table entity. All the fields of the
// 변수 receiver are updated, as well as status and updated_at.
// The entity id is returned on success or an error.
func (一 변수) Update(
	ctx context.Context, tx *sql.Tx, from shift.Status, to shift.Status,
) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	if 一.UpdatedAt.IsZero() {
		return 0, errors.New("updated_at is required")
	}

	q.WriteString("update bar_baz set `status`=? ")
	args = append(args, to.ShiftStatus())

	q.WriteString(", `name`=?")
	args = append(args, 一.Name)

	q.WriteString(", `updated_at`=?")
	args = append(args, 一.UpdatedAt)

	q.WriteString(" where `id`=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.Wrap(shift.ErrRowCount, "변수", j.KV("count", n))
	}

	return 一.ID, nil
}

// Update updates the status of a bar_baz table entity. All the fields of the
// エラー receiver are updated, as well as status and updated_at.
// The entity id is returned on success or an error.
func (一 エラー) Update(
	ctx context.Context, tx *sql.Tx, from shift.Status, to shift.Status,
) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	if 一.UpdatedAt.IsZero() {
		return 0, errors.New("updated_at is required")
	}

	q.WriteString("update bar_baz set `status`=? ")
	args = append(args, to.ShiftStatus())

	q.WriteString(", `surname`=?")
	args = append(args, 一.Surname)

	q.WriteString(", `updated_at`=?")
	args = append(args, 一.UpdatedAt)

	q.WriteString(" where `id`=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.Wrap(shift.ErrRowCount, "エラー", j.KV("count", n))
	}

	return 一.ID, nil
}
